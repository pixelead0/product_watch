version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    env_file: .env
    volumes:
      - ./src:/app/src
    environment:
      - PYTHONPATH=/app/src
    command: sh -c "cd src && python manage.py migrate && uvicorn product_watch.asgi:application --host 0.0.0.0 --port 8000 --reload"

  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    env_file: .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $POSTGRES_USER -d product_watch" ]
      interval: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  celery:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    command: sh -c "cd src && celery -A product_watch worker -l INFO"
    depends_on:
      - redis
      - postgres
    env_file: .env
    volumes:
      - ./src:/app/src
    environment:
      - PYTHONPATH=/app/src

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    command: sh -c "cd src && celery -A product_watch beat -l INFO"
    depends_on:
      - redis
      - postgres
    env_file: .env
    volumes:
      - ./src:/app/src
    environment:
      - PYTHONPATH=/app/src

  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
  
  tests:
      build:
        context: .
        dockerfile: Dockerfile
        target: development
      depends_on:
        - postgres
        - redis
      env_file: .env
      volumes:
        - ./src:/app/src
        - ./pyproject.toml:/app/pyproject.toml
      environment:
        - PYTHONPATH=/app/src
      command: sh -c "poetry install && poetry run pytest"

volumes:
  postgres_data:
  redis_data:
